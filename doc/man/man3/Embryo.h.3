.TH "Embryo.h" 3 "19 May 2008" "Embryo" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Embryo.h \- Embryo virtual machine library. 
.SH SYNOPSIS
.br
.PP
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBEMBRYO_FUNCTION_NONE\fP   0x7fffffff"
.br
.RI "\fIAn invalid/non-existant function. \fP"
.ti -1c
.RI "#define \fBEMBRYO_FUNCTION_MAIN\fP   -1"
.br
.RI "\fIStart at program entry point. \fP"
.ti -1c
.RI "#define \fBEMBRYO_FUNCTION_CONT\fP   -2"
.br
.RI "\fIContinue from last address. \fP"
.ti -1c
.RI "#define \fBEMBRYO_CELL_NONE\fP   0x7fffffff"
.br
.RI "\fIAn invalid cell reference. \fP"
.ti -1c
.RI "#define \fBEMBRYO_PROGRAM_OK\fP   1"
.br
.RI "\fIProgram was run successfully. \fP"
.ti -1c
.RI "#define \fBEMBRYO_PROGRAM_SLEEP\fP   2"
.br
.RI "\fIThe program's execution was interrupted by a Small \fCsleep\fP command. \fP"
.ti -1c
.RI "#define \fBEMBRYO_PROGRAM_FAIL\fP   0"
.br
.RI "\fIAn error in the program caused it to fail. \fP"
.ti -1c
.RI "#define \fBEMBRYO_FLOAT_TO_CELL\fP(f)   ((Embryo_Float_Cell) f).c"
.br
.RI "\fIFloat to Embryo_Cell. \fP"
.ti -1c
.RI "#define \fBEMBRYO_CELL_TO_FLOAT\fP(c)   ((Embryo_Float_Cell) c).f"
.br
.RI "\fIEmbryo_Cell to float. \fP"
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum { , \fBEMBRYO_ERROR_ASSERT\fP, \fBEMBRYO_ERROR_STACKERR\fP, \fBEMBRYO_ERROR_BOUNDS\fP, \fBEMBRYO_ERROR_MEMACCESS\fP, \fBEMBRYO_ERROR_INVINSTR\fP, \fBEMBRYO_ERROR_STACKLOW\fP, \fBEMBRYO_ERROR_HEAPLOW\fP, \fBEMBRYO_ERROR_CALLBACK\fP, \fBEMBRYO_ERROR_NATIVE\fP, \fBEMBRYO_ERROR_DIVIDE\fP, \fBEMBRYO_ERROR_SLEEP\fP, \fBEMBRYO_ERROR_MEMORY\fP =  16, \fBEMBRYO_ERROR_FORMAT\fP, \fBEMBRYO_ERROR_VERSION\fP, \fBEMBRYO_ERROR_NOTFOUND\fP, \fBEMBRYO_ERROR_INDEX\fP, \fBEMBRYO_ERROR_DEBUG\fP, \fBEMBRYO_ERROR_INIT\fP, \fBEMBRYO_ERROR_USERDATA\fP, \fBEMBRYO_ERROR_INIT_JIT\fP, \fBEMBRYO_ERROR_PARAMS\fP, \fBEMBRYO_ERROR_DOMAIN\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "EAPI int \fBembryo_init\fP (void)"
.br
.RI "\fIInitialises the Embryo library. \fP"
.ti -1c
.RI "EAPI int \fBembryo_shutdown\fP (void)"
.br
.RI "\fIShuts down the Embryo library. \fP"
.ti -1c
.RI "EAPI Embryo_Program * \fBembryo_program_new\fP (void *data, int size)"
.br
.RI "\fICreates a new Embryo program, with bytecode data that can be freed. \fP"
.ti -1c
.RI "EAPI Embryo_Program * \fBembryo_program_const_new\fP (void *data, int size)"
.br
.RI "\fICreates a new Embryo program, with bytecode data that cannot be freed. \fP"
.ti -1c
.RI "EAPI Embryo_Program * \fBembryo_program_load\fP (char *file)"
.br
.RI "\fICreates a new Embryo program based on the bytecode data stored in the given file. \fP"
.ti -1c
.RI "EAPI void \fBembryo_program_free\fP (Embryo_Program *ep)"
.br
.RI "\fIFrees the given Embryo program. \fP"
.ti -1c
.RI "EAPI void \fBembryo_program_native_call_add\fP (Embryo_Program *ep, const char *name, Embryo_Cell(*func)(Embryo_Program *ep, Embryo_Cell *params))"
.br
.RI "\fIAdds a native program call to the given Embryo program. \fP"
.ti -1c
.RI "EAPI void \fBembryo_program_vm_reset\fP (Embryo_Program *ep)"
.br
.RI "\fIResets the current virtual machine session of the given program. \fP"
.ti -1c
.RI "EAPI void \fBembryo_program_vm_push\fP (Embryo_Program *ep)"
.br
.RI "\fIStarts a new virtual machine session for the given program. \fP"
.ti -1c
.RI "EAPI void \fBembryo_program_vm_pop\fP (Embryo_Program *ep)"
.br
.RI "\fIFrees the current virtual machine session associated with the given program. \fP"
.ti -1c
.RI "EAPI void \fBembryo_swap_16\fP (unsigned short *v)"
.br
.RI "\fIEnsures that the given unsigned short integer is in the small endian format. \fP"
.ti -1c
.RI "EAPI void \fBembryo_swap_32\fP (unsigned int *v)"
.br
.RI "\fIEnsures that the given unsigned integer is in the small endian format. \fP"
.ti -1c
.RI "EAPI Embryo_Function \fBembryo_program_function_find\fP (Embryo_Program *ep, const char *name)"
.br
.RI "\fIReturns the function in the given program with the given name. \fP"
.ti -1c
.RI "EAPI Embryo_Cell \fBembryo_program_variable_find\fP (Embryo_Program *ep, const char *name)"
.br
.RI "\fIRetrieves the location of the public variable in the given program with the given name. \fP"
.ti -1c
.RI "EAPI int \fBembryo_program_variable_count_get\fP (Embryo_Program *ep)"
.br
.RI "\fIRetrieves the number of public variables in the given program. \fP"
.ti -1c
.RI "EAPI Embryo_Cell \fBembryo_program_variable_get\fP (Embryo_Program *ep, int num)"
.br
.RI "\fIRetrieves the location of the public variable in the given program with the given identifier. \fP"
.ti -1c
.RI "EAPI void \fBembryo_program_error_set\fP (Embryo_Program *ep, int error)"
.br
.RI "\fISets the error code for the given program to the given code. \fP"
.ti -1c
.RI "EAPI int \fBembryo_program_error_get\fP (Embryo_Program *ep)"
.br
.RI "\fIRetrieves the current error code for the given program. \fP"
.ti -1c
.RI "EAPI void \fBembryo_program_data_set\fP (Embryo_Program *ep, void *data)"
.br
.RI "\fISets the data associated to the given program. \fP"
.ti -1c
.RI "EAPI void * \fBembryo_program_data_get\fP (Embryo_Program *ep)"
.br
.RI "\fIRetrieves the data associated to the given program. \fP"
.ti -1c
.RI "EAPI const char * \fBembryo_error_string_get\fP (int error)"
.br
.RI "\fIRetrieves a string describing the given error code. \fP"
.ti -1c
.RI "EAPI int \fBembryo_data_string_length_get\fP (Embryo_Program *ep, Embryo_Cell *str_cell)"
.br
.RI "\fIRetrieves the length of the string starting at the given cell. \fP"
.ti -1c
.RI "EAPI void \fBembryo_data_string_get\fP (Embryo_Program *ep, Embryo_Cell *str_cell, char *dst)"
.br
.RI "\fICopies the string starting at the given cell to the given buffer. \fP"
.ti -1c
.RI "EAPI void \fBembryo_data_string_set\fP (Embryo_Program *ep, const char *src, Embryo_Cell *str_cell)"
.br
.RI "\fICopies string in the given buffer into the virtual machine memory starting at the given cell. \fP"
.ti -1c
.RI "EAPI Embryo_Cell * \fBembryo_data_address_get\fP (Embryo_Program *ep, Embryo_Cell addr)"
.br
.RI "\fIRetreives a pointer to the address in the virtual machine given by the given cell. \fP"
.ti -1c
.RI "EAPI Embryo_Cell \fBembryo_data_heap_push\fP (Embryo_Program *ep, int cells)"
.br
.RI "\fIIncreases the size of the heap of the given virtual machine by the given number of Embryo_Cells. \fP"
.ti -1c
.RI "EAPI void \fBembryo_data_heap_pop\fP (Embryo_Program *ep, Embryo_Cell down_to)"
.br
.RI "\fIDecreases the size of the heap of the given virtual machine down to the given size. \fP"
.ti -1c
.RI "EAPI int \fBembryo_program_recursion_get\fP (Embryo_Program *ep)"
.br
.RI "\fIReturns the number of virtual machines are running for the given program. \fP"
.ti -1c
.RI "EAPI int \fBembryo_program_run\fP (Embryo_Program *ep, Embryo_Function func)"
.br
.RI "\fIRuns the given function of the given Embryo program in the current virtual machine. \fP"
.ti -1c
.RI "EAPI Embryo_Cell \fBembryo_program_return_value_get\fP (Embryo_Program *ep)"
.br
.RI "\fIRetreives the return value of the last called function of the given program. \fP"
.ti -1c
.RI "EAPI void \fBembryo_program_max_cycle_run_set\fP (Embryo_Program *ep, int max)"
.br
.RI "\fISets the maximum number of abstract machine cycles any given program run can execute before being put to sleep and returning. \fP"
.ti -1c
.RI "EAPI int \fBembryo_program_max_cycle_run_get\fP (Embryo_Program *ep)"
.br
.RI "\fIRetreives the maximum number of abstract machine cycles a program is allowed to run. \fP"
.ti -1c
.RI "EAPI int \fBembryo_parameter_cell_push\fP (Embryo_Program *ep, Embryo_Cell cell)"
.br
.RI "\fIPushes an Embryo_Cell onto the function stack to use as a parameter for the next function that is called in the given program. \fP"
.ti -1c
.RI "EAPI int \fBembryo_parameter_string_push\fP (Embryo_Program *ep, const char *str)"
.br
.RI "\fIPushes a string onto the function stack to use as a parameter for the next function that is called in the given program. \fP"
.ti -1c
.RI "EAPI int \fBembryo_parameter_cell_array_push\fP (Embryo_Program *ep, Embryo_Cell *cells, int num)"
.br
.RI "\fIPushes an array of Embryo_Cells onto the function stack to be used as parameters for the next function that is called in the given program. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Embryo virtual machine library. 

This file includes the routines needed for Embryo library interaction. This is the \fIonly\fP file you need to include. 
.SH "Define Documentation"
.PP 
.SS "#define EMBRYO_FUNCTION_CONT   -2"
.PP
Continue from last address. 
.PP
For use with \fBembryo_program_run\fP. 
.PP
Referenced by embryo_program_run().
.SS "#define EMBRYO_FUNCTION_MAIN   -1"
.PP
Start at program entry point. 
.PP
For use with \fBembryo_program_run\fP. 
.PP
Referenced by embryo_program_run().
.SH "Enumeration Type Documentation"
.PP 
.SS "anonymous enum"
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIEMBRYO_ERROR_ASSERT \fP\fP
Forced exit. 
.TP
\fB\fIEMBRYO_ERROR_STACKERR \fP\fP
Assertion failed. 
.TP
\fB\fIEMBRYO_ERROR_BOUNDS \fP\fP
Stack/heap collision. 
.TP
\fB\fIEMBRYO_ERROR_MEMACCESS \fP\fP
Index out of bounds. 
.TP
\fB\fIEMBRYO_ERROR_INVINSTR \fP\fP
Invalid memory access. 
.TP
\fB\fIEMBRYO_ERROR_STACKLOW \fP\fP
Invalid instruction. 
.TP
\fB\fIEMBRYO_ERROR_HEAPLOW \fP\fP
Stack underflow. 
.TP
\fB\fIEMBRYO_ERROR_CALLBACK \fP\fP
Heap underflow. 
.TP
\fB\fIEMBRYO_ERROR_NATIVE \fP\fP
No callback, or invalid callback. 
.TP
\fB\fIEMBRYO_ERROR_DIVIDE \fP\fP
Native function failed. 
.TP
\fB\fIEMBRYO_ERROR_SLEEP \fP\fP
Divide by zero. 
.TP
\fB\fIEMBRYO_ERROR_MEMORY \fP\fP
Go into sleepmode - code can be restarted. 
.TP
\fB\fIEMBRYO_ERROR_FORMAT \fP\fP
Out of memory. 
.TP
\fB\fIEMBRYO_ERROR_VERSION \fP\fP
Invalid file format. 
.TP
\fB\fIEMBRYO_ERROR_NOTFOUND \fP\fP
File is for a newer version of the Embryo_Program. 
.TP
\fB\fIEMBRYO_ERROR_INDEX \fP\fP
Function not found. 
.TP
\fB\fIEMBRYO_ERROR_DEBUG \fP\fP
Invalid index parameter (bad entry point). 
.TP
\fB\fIEMBRYO_ERROR_INIT \fP\fP
Debugger cannot run. 
.TP
\fB\fIEMBRYO_ERROR_USERDATA \fP\fP
Embryo_Program not initialized (or doubly initialized). 
.TP
\fB\fIEMBRYO_ERROR_INIT_JIT \fP\fP
Unable to set user data field (table full). 
.TP
\fB\fIEMBRYO_ERROR_PARAMS \fP\fP
Cannot initialize the JIT. 
.TP
\fB\fIEMBRYO_ERROR_DOMAIN \fP\fP
Parameter error. 
.SH "Author"
.PP 
Generated automatically by Doxygen for Embryo from the source code.
